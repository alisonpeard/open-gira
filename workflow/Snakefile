"""
Snakemake file for open-gira.

Snakemake is a workflow organiser. Snakemake is given a list of desired output files
(see rule all below), and if those files don't exist (or aren't up to date), for each
of those files it looks for a rule that can be used to generate it. The process is
then repeated for that rule -- if the files required to build _these files_ don't exist,
look for a rule that will produce them -- and so on.

The Snakemake workflow is covered in detail in the documentation.
"""

import math
import os.path
from glob import glob

import requests


configfile: "config/config.yaml"

# Check configfile
if any(["/" in h for h in config['hazard_datasets'].keys()]):
    raise ValueError("""Error in config: Hazard dataset names cannot contain / or _""")
if any(["/" in h for h in config['network_filters'].keys()]):
    raise ValueError("""Error in config: Network filter names cannot contain / or _""")
if any(["/" in h for h in config['infrastructure_datasets'].keys()]):
    raise ValueError("""Error in config: Infrastructure dataset names cannot contain / or _""")

# Number of slices to cut dataset into -- must be a square number
if not isinstance(config['slice_count'], int) or \
        (math.sqrt(config['slice_count']) % 1 > 0 and config['slice_count'] != 1):
    raise ValueError("""Error in config: slice_count must be an integer, either a square number or 1""")

for network, file_path in config['network_filters'].items():
    if not os.path.exists(file_path):
        raise FileNotFoundError((
            "Error in config: could not locate network_filter at "
            f"{os.path.join(os.getcwd(), file_path)}"
        ))

# Constrain wildcards to NOT use _ or /
wildcard_constraints:
    DATASET="[^_/]+",
    SLICE_SLUG="slice-[0-9]+",
    FILTER_SLUG="filter-[^_/]+",
    HAZARD_SLUG="hazard-[^_/]+",
    FILENAME="[^/]+",
    STORM_BASIN="EP|NA|NI|SI|SP|WP",
    STORM_MODEL="constant|CMCC-CM2-VHR4|CNRM-CM6-1-HR|EC-Earth3P-HR|HadGEM3-GC31-HM",

# generate values for global variables used across rules
include: "rules/storm_workflow_global_variables.smk"

##### load rules #####
include: "rules/download/coastlines.smk"
include: "rules/download/natural-earth.smk"
include: "rules/download/storm-ibtracs.smk"
include: "rules/download/gadm.smk"
include: "rules/download/gridfinder.smk"
include: "rules/download/worldpop-population.smk"
include: "rules/download/hazards.smk"
include: "rules/download/dryad-gdp.smk"
include: "rules/download/wri-powerplants.smk"
include: "rules/download/osm.smk"
include: "rules/download/power_download_all.smk"

include: "rules/preprocess/filter_osm_data.smk"
include: "rules/preprocess/trim_hazard_data.smk"
include: "rules/preprocess/targets.smk"
include: "rules/preprocess/network.smk"
include: "rules/preprocess/split-gridfinder.smk"
include: "rules/preprocess/create_bbox_extracts.smk"
include: "rules/preprocess/exclude-countries.smk"
include: "rules/preprocess/create_transport_network.smk"
include: "rules/preprocess/slice.smk"
include: "rules/preprocess/join_network.smk"
include: "rules/preprocess/split-world.smk"
include: "rules/preprocess/join_data.smk"
include: "rules/preprocess/convert_to_geoparquet.smk"
include: "rules/preprocess/connector.smk"
include: "rules/preprocess/create_overall_bbox.smk"
include: "rules/preprocess/powerplants.smk"
include: "rules/preprocess/power_preprocess_all.smk"

include: "rules/analyse/aggregate_levels.smk"
include: "rules/analyse/network_components.smk"
include: "rules/analyse/empirical_distribution.smk"
include: "rules/analyse/country_pair_matrix.smk"
include: "rules/analyse/transmission_aggregate.smk"
include: "rules/analyse/extract_percentile.smk"
include: "rules/analyse/target_analysis.smk"
include: "rules/analyse/plot/fig_initial.smk"
include: "rules/analyse/plot/fig_cross_correlation.smk"
include: "rules/analyse/plot/make_exposure_tif.smk"
include: "rules/analyse/plot/fig_EACA.smk"
include: "rules/analyse/plot/make_exposure_img.smk"
include: "rules/analyse/plot/fig_CDFs.smk"
include: "rules/analyse/plot/fig_EAD_EACA.smk"
include: "rules/analyse/plot/fig_EAD.smk"
include: "rules/analyse/plot/fig_master.smk"
include: "rules/analyse/power_analyse_all.smk"

include: "rules/exposure/network_raster.smk"
include: "rules/exposure/gdp-loss.smk"
include: "rules/exposure/intersect-overview.smk"
include: "rules/exposure/extract-wind.smk"
include: "rules/exposure/region-boxes.smk"
include: "rules/exposure/region-grid.smk"
include: "rules/exposure/power_intersect_all.smk"

##### target rules #####

# Require the completed overlay image file to be present for each hazard
rule all:
    input:
        expand(
            os.path.join(
                f"{config['output_dir']}",
                "exposure",
                f"{{dataset}}_filter-{{network_filter}}",
                f"hazard-{{hazard}}",
                "img"
            ),
            dataset=config['infrastructure_datasets'].keys(),
            network_filter=config['network_filters'].keys(),
            hazard=config['hazard_datasets'].keys()
        )

# Remove intermediate directories
rule clean:
    shell:
        """
        rm -rf {config[output_dir]}/json &&
        rm -rf {config[output_dir]}/geoparquet &&
        rm -rf {config[output_dir]}/slices &&
        rm -rf {config[output_dir]}/splits &&
        rm -rf {config[output_dir]}/power_processed &&
        rm -rf {config[output_dir]}/power_intersection
        """

# Remove everything except the final results
rule clean_all:
    shell:
        """
        rm -rf {config[output_dir]}/input &&
        rm -rf {config[output_dir]}/json &&
        rm -rf {config[output_dir]}/geoparquet &&
        rm -rf {config[output_dir]}/slices &&
        rm -rf {config[output_dir]}/splits &&
        rm -rf {config[output_dir]}/power_processed &&
        rm -rf {config[output_dir]}/power_intersection
        """
